version: '3.8'

services:
  app:
    build: .
    restart: always
    ports:
      - "8501:8501"
    environment:
      - DB_HOST=db
      - DB_NAME=ordens_servico
      - DB_USER=postgres
      - DB_PASSWORD=1234
      - TZ=America/Sao_Paulo
    depends_on:
      db:
        # Garante que a aplicação só inicie após o banco de dados
        # estar 100% pronto para aceitar conexões.
        condition: service_healthy

  db:
    image: postgres:13
    restart: always
    environment:
      - POSTGRES_DB=ordens_servico
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - TZ=America/Sao_Paulo
    volumes:
      # Volume para persistir os dados do banco de dados.
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    # Seção crucial que verifica se o banco de dados está
    # realmente pronto antes de marcar o serviço como "saudável".
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ordens_servico"]
      interval: 5s
      timeout: 5s
      retries: 5

  backup:
    # Assume que você tem um arquivo chamado "backup.dockerfile"
    # para construir a imagem deste serviço.
    build:
      context: .
      dockerfile: backup.dockerfile
    restart: always
    environment:
      # Variáveis essenciais para que o script backup.sh
      # consiga se conectar ao banco de dados corretamente.
      - DB_HOST=db
      - DB_NAME=ordens_servico
      - DB_USER=postgres
      - DB_PASSWORD=1234
      - TZ=America/Sao_Paulo
    volumes:
      # Mapeia a pasta /backups de dentro do contêiner para uma
      # pasta chamada "backups" no seu computador. Essencial para
      # manter os arquivos de backup seguros.
      - ./backups:/backups
    depends_on:
      db:
        # Garante que o backup só tente rodar quando o banco
        # de dados estiver 100% pronto, evitando backups vazios.
        condition: service_healthy

volumes:
  postgres_data:
